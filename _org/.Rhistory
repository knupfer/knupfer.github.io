
Entropietemp
Entropieall
colMeans(Entropieall)
Entropie = cbind(Entropie, colMeans(Entropieall))
Entropie
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
summe
'org_babel_R_eoe'
png(filename="/images/benchmark.png")
plot(benchmark, type="l", col=rgb(0,0,0), ann=F)
title(xlab="Dauer")
title(ylab="Durchlauf")
dev.off()
'org_babel_R_eoe'
png(filename="/images/entropie3.png")
calculationtime <- proc.time()
library(multicore)
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
for (bench in 1:15) {
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

items = length(komus[1:bench])


modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))

komus2 = komus[c(names(sort(Entropie[,2], decreasing = TRUE)))]
modell[[1]] = glm(V1 ~ 1, data = komus2, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus2[1:i-1]), names(komus2[i])), data = komus2, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(Entropie, colMeans(Entropietemp))
Entropie = cbind(Entropie, sort(Entropie[,5], decreasing = TRUE))


fragen = c(44)

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    Entropietemp = NULL
    fitting = NULL

    for (j in 1:length(komus[-fragen])) {
        fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
    }

    #fitting = mclapply(fitting, step, trace = 0)
    #fitting = mclapply(fitting, step, ~.^2, trace = 0)
    chances = simplify2array(mclapply(fitting, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    fragen = c(fragen, which(names(komus[-fragen][which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]) == names(komus)))
    modell[[i]] = fitting[[which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]]
}

chances = simplify2array(mclapply(modell, predict, type="response"))
Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
Entropie = cbind(Entropie, colMeans(Entropietemp))

Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:3) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))

for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}

plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
legend(1, length(summe[,1]), c(ttt), cex=0.8, lty=1)

}

dev.off()
'org_babel_R_eoe'
png(filename="/images/entropie3.png")
calculationtime <- proc.time()
library(multicore)
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
for (bench in 2:15) {
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

items = length(komus[1:bench])


modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))

komus2 = komus[c(names(sort(Entropie[,2], decreasing = TRUE)))]
modell[[1]] = glm(V1 ~ 1, data = komus2, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus2[1:i-1]), names(komus2[i])), data = komus2, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(Entropie, colMeans(Entropietemp))
Entropie = cbind(Entropie, sort(Entropie[,5], decreasing = TRUE))


fragen = c(44)

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    Entropietemp = NULL
    fitting = NULL

    for (j in 1:length(komus[-fragen])) {
        fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
    }

    #fitting = mclapply(fitting, step, trace = 0)
    #fitting = mclapply(fitting, step, ~.^2, trace = 0)
    chances = simplify2array(mclapply(fitting, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    fragen = c(fragen, which(names(komus[-fragen][which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]) == names(komus)))
    modell[[i]] = fitting[[which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]]
}

chances = simplify2array(mclapply(modell, predict, type="response"))
Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
Entropie = cbind(Entropie, colMeans(Entropietemp))

Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:3) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))

for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}

plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
legend(1, length(summe[,1]), c(ttt), cex=0.8, lty=1)

}

dev.off()
'org_babel_R_eoe'
png(filename="/images/entropie3.png")
calculationtime <- proc.time()
library(multicore)
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
for (bench in 2:15) {
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

items = length(komus[1:bench])


modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))

komus2 = komus[c(names(sort(Entropie[,2], decreasing = TRUE)))]
modell[[1]] = glm(V1 ~ 1, data = komus2, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus2[1:i-1]), names(komus2[i])), data = komus2, family = "binomial"(link=logit))
}
fitting = modell
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(Entropie, colMeans(Entropietemp))
Entropie = cbind(Entropie, sort(Entropie[,5], decreasing = TRUE))


fragen = c(44)

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    Entropietemp = NULL
    fitting = NULL

    for (j in 1:length(komus[-fragen])) {
        fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
    }

    #fitting = mclapply(fitting, step, trace = 0)
    #fitting = mclapply(fitting, step, ~.^2, trace = 0)
    chances = simplify2array(mclapply(fitting, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    fragen = c(fragen, which(names(komus[-fragen][which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]) == names(komus)))
    modell[[i]] = fitting[[which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))]]
}

chances = simplify2array(mclapply(modell, predict, type="response"))
Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
Entropie = cbind(Entropie, colMeans(Entropietemp))

Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:3) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))

for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}


}
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
legend(1, length(summe[,1]), c(ttt), cex=0.8, lty=1)
dev.off()
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    information = information - max(information)
}


#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 5
persons = 5
############
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    information = information - max(information)
}


#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
komus[1]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mean(komus[1])
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
colMeans(komus[1])
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)[1]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)[,1]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)[1,]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)[1,1]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)[1]
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mcsapply(komus[1],mean)
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))
#    Entropietemp = (-mean(komus[1]*log(chances,2)-(1-chances)*log(1-chances,2))
#    information = information - max(information)
}
mclapply(komus[1],mean)
information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = mclapply(komus[j],mean)
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))- (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))

#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = sapply(komus[j],mean)
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))- (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))

#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

for (j in 1:10) {
    for (k in 1:3) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[j],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))- (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))

#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) - (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
#information = -(information - max(information))
information = information- (-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
#names(information) = colnames(komus)
information
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) - (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
#information = -(information - max(information))
information = information- (-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2))
#names(information) = colnames(komus)
information
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2))
for (j in 1:2) {
    for (k in 1:1) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[j],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))- (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))

#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
calculationtime <- proc.time()
fitting = NULL
fitting2 = NULL
chances = NULL
chances2 = NULL
fitting3 = NULL
fitting2 = NULL
fitting = NULL
beta = NULL
chances = NULL
information = NULL

sum((-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))
for (j in 1:2) {
    for (k in 1:1) {
        beta[[k]] = glm(reformulate(names(komus[j]), names(komus[-j][k])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[j],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[j] = sum(colMeans(Entropietemp))- (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))

#    information = information - max(information)
}

information
#   chances2 = simplify2array(mclapply(fitting2, predict, komus[1,], type="response"))

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
#chances - chances2
#chances
#chances2
#fitting
#fitting2
benchmark = NULL
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
#information = -(information - max(information))
information = information- sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2))
#names(information) = colnames(komus)
information
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 10
persons = 1
############
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 10
persons = 1
############
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}

benchmark
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(colMeans(Entropietemp))

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind((Entropietemp))

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}

benchmark
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 10
persons = 1
############
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
summe
benchmark
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(colMeans(Entropieall))
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 10
persons = 1
############
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
summe
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
colMeans(Entropieall)
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
colMeans(Entropieall)
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 50
persons = 1
############
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
sum(colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}
fragen
Entropie = cbind(Entropie, colMeans(Entropieall))
colMeans(Entropieall)
sum(colMeans(Entropieall))
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
#legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL

        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }
        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
####### Bedingte Entropie, sortiert nach jeder individuellen Antwort
Entropieall = NULL
chances = NULL
information = NULL
beta = NULL

for (m in 1:length(komus)) {
    for (n in 1:(length(komus)-1)) {
        beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
    }
    chances = simplify2array(mclapply(beta, predict, type="response"))
    chancetemp = unlist(mclapply(komus[m],mean))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    information[m] = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
}
information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))

modell[[1]] = glm(V44 ~ 1, data = komus, family = "binomial"(link=logit))
for (k in 1:persons) {
    fragen = c(44)
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
        for (j in 1:length(komus[-fragen])) {
            fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
        }

        #fitting = mclapply(fitting, step, trace = 0)
        #fitting = mclapply(fitting, step, ~.^2, trace = 0)
        ## TODO stimmt das so?
        chances = simplify2array(mclapply(fitting, predict, komus[k,], type="response"))
    
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + information[-fragen]*(1 - (length(fragen)+1)/items)
        fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))]) == names(komus)))
        modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))]]
    }

    chances = simplify2array(mclapply(modell, predict, komus[k,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
    if (exists("Entropieall")) {
        Entropieall = rbind(Entropieall, Entropietemp)
    } else {
        Entropieall = Entropietemp
    }
}

Entropie = cbind(Entropie, colMeans(Entropieall))
'org_babel_R_eoe'
################# Schlussberechnungen
for (i in 1:length(Entropie[1,])) {
    for (j in 1:length(Entropie[,1])) {
        summe[j,i] = sum(Entropie[1:j,i])
    }
}

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
benchmark
'org_babel_R_eoe'
png(filename="/images/entropie2.png")
plot(1:length(summe[,1]), type="l", col=rgb(0,0,0), ann=F)
for (i in 1:(length(summe[1,]))) {
#farbe = 1 - (sum(summe[,i])/sum(1:length(summe[,1])))^5

lines(summe[,i], col=rgb(runif(1,0,1),runif(1,0,1),runif(1,0,1)))
}
title(xlab="Anzahl der beantworteten Fragen")
title(ylab="Entropie in bit")
#legend(1, length(summe[,1]), c(names(summe)), cex=0.8, lty=1)
#legend(1, length(summe[,1]), c(benchmark,summe[48:50,7],summe[48:50,8]), cex=0.8, lty=1)


dev.off()
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest$mups = c(1,3,2)

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

exists(datatest$mups)

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

exists("datatest$mups")

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = cbind(datatest, c(1,6,88))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = append(datatest, c(1,6,88))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists("datatest$muu")

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists("datatest$muu")
datatest$muu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists(datatest$muu)
datatest$muu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$mu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$m

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$me

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muuu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muu

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muu = c(1,2)
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muu = c(1,2,5)
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88), mi = c(1,2))
datatest
exists('datatest$muu')
datatest$muu = c(1,2,5)
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest$muu = c(1,2,5)
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest = append(datatest, mii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest = append(datatest, c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest = datatest(miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest = data.frame(datatest(miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

datatest = data.frame(muu = c(1,6,88))
datatest
exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

#datatest = data.frame(muu = c(1,6,88))
#datatest
exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()

#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest
df <- data.frame(matrix(ncol = 1, nrow = 10))
df
if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 10))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 3))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 3))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datatest$niiatreat
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 3))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
datateset$niiatreat
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()


da = data.frame()
datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 3))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
da$niiatreat
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()


da = data.frame()
datatest = data.frame()
datatest <- data.frame(matrix(ncol = 1, nrow = 3))
datatest
#datatest = data.frame(muu = c(1,6,88))
#datatest
#exists('datatest$muu')
da$niiatreat = c(1,2)
datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest <- data.frame(matrix(ncol = 1, nrow = 3))

datatest$muu =  c(1,6,88)
#datatest
#exists('datatest$muu')
#da$niiatreat = c(1,2)
#datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
calculationtime <- proc.time()



datatest <- data.frame(matrix(ncol = 1, nrow = 3))

datatest$muu =  c(1,6,88)
#datatest
datatest$muu = c(1,99,55)
#exists('datatest$muu')
#da$niiatreat = c(1,2)
#datatest = data.frame(datatest, miiii = c(1,2,3))
datatest

if (exists("benchmark")) {
    benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
} else {
    benchmark = (proc.time() - calculationtime)[3]
}
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entrodf$unbedunsor = Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2)
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entrodf$unbedsor = Entropie,sort(Entropie[,2], decreasing = TRUE)
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf$bedsor = Entropie,sort(Entropie[,1], decreasing = TRUE)
Entrodef
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entrodf$unbedunsor = Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2)
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entrodf$unbedsor = Entropie,sort(Entropie[,2], decreasing = TRUE)
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf$bedsor = Entropie,sort(Entropie[,1], decreasing = TRUE)
Entrodf
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entrodf$unbedunsor = -colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2)
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entrodf$unbedsor = sort(Entropie[,2], decreasing = TRUE)
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf$bedsor = sort(Entropie[,1], decreasing = TRUE)
Entrodf
'org_babel_R_eoe'
############## Bedingte und undbedingte Entropie in normaler Reihenfolge
modell[[1]] = glm(V1 ~ 1, data = komus, family = "binomial"(link=logit))

for (i in 2:items) {
    modell[[i]] = glm(reformulate(names(komus[1:i-1]), names(komus[i])), data = komus, family = "binomial"(link=logit))
}
fitting = modell
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
chances = simplify2array(mclapply(fitting, predict, type="response"))
Entropietemp = -chances*log(chances,2)-(1-chances)*log(1-chances,2)
Entropie = cbind(colMeans(Entropietemp))
Entrodf$bedunsor = colMeans(Entropietemp)
Entropie = cbind(Entropie,-colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2))
Entrodf$unbedunsor = -colMeans(komus[1:items])*log(colMeans(komus[1:items]),2)-(1-colMeans(komus[1:items]))*log(1-colMeans(komus[1:items]),2)
Entropie = cbind(Entropie,sort(Entropie[,2], decreasing = TRUE))
Entrodf$unbedsor = sort(Entropie[,2], decreasing = TRUE)
Entropie = cbind(Entropie,sort(Entropie[,1], decreasing = TRUE))
Entrodf$bedsor = sort(Entropie[,1], decreasing = TRUE)
Entrodf
Entropie
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
Entrodf[1] = 4
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
name(Entrodf[1]) = 'mu'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf[1]) = 'mu'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
colnames(Entrodf[1]) = 'mu'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
colnames(Entrodf) = 'mu'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'mu'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
Entrodf$kill
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
Entrodf$eatrtkill
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
Entrodf$kill == NULL
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
Entrodf$iekill == NULL
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
Entrodf
Entrodf$kill == NA
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
#Entrodf
Entrodf$kill == 4
'org_babel_R_eoe'
library(multicore)
calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()

############
#items = length(komus)
#persons = length(komus[,1])
items = 2
persons = 1
############

Entrodf =  data.frame(matrix(ncol = 1, nrow = items))
names(Entrodf) = 'kill'
#Entrodf
Entrodf$kill ==
'org_babel_R_eoe'
