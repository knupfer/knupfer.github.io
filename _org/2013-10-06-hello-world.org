#+BEGIN_COMMENT
---
layout: post
title:  "Hello World!"
father: Linux
---
#+END_COMMENT

* Begrüßung
Hallo, dies ist mein erster Post hier. Ich bin gespannt, ob ich mich für das Bloggen begeistern kann. Gleichzeitig dient diese Homepage dazu, gemeinschaftlich über Probleme nachzudenken. Diese können aus ganz verschiedenen Bereichen kommen. Hier im Speziellen wird es sich um Themen der Musikpädagogik, der Empirie, des Computers und der Typography drehen.

** Zu meiner Person
Ich bin derzeit Student der Schul- und Kirchenmusik und der Physik. Ich plane nach dem Studium einen Doktor in empirischer Musikpädagogik zu machen und beschäftige mich deswegen nun seit ein paar Wochen mit dem Programmieren. 
Angefangen habe ich mit Python; als pädagogische Programmiersprache erschien mir dies besonders Sinnvoll in anbetracht meiner mangelnden Erfahrung. Nach ein paar ersten Progrämmchen verlor ich ein wenig die Motivation aufgrund von fehlenden Problemstellungen.

Dann bin ich auf die Lernplattform [[http://www.edx.org][EdX]] gestoßen. Diese bietet kostenlose MOOCs an, also Vorlesungen (meist vom MIT oder Harvard), die den regulären Studenten auch angeboten werden. Dort bin ich nun in CS50 eingeschrieben und besuche regelmäßig Vorlesungen zum Programmieren und bearbeite auch die dortigen Aufgaben. So bin ich erst zu C und dann zu PHP gekommen.

* Programmierung der Homepage 
Die Grundlagen dieser durch [[http://www.jekyllrb.com][Jekyll]] compilierten Homepage haben mich einige Tage gekostet, da ich noch kaum Erfahrung mit Markup-Sprachen hatte. Ferner wollte ich einige Prozesse automatisieren und verbessern, was mir manch einen Nerv geraubt hat.

** Jekyll
Jekyll ist ein statischer Homepage generierer der vor allem bei Programmieren sehr beliebt ist. Dies liegt an Verschiedenem.

*** Statische Homepages
Der große Vorteil an statischen Homepages ist, dass diese keine Datenbank wie MySQL benötigen. Zudem benötigen sie kein PHP und sind somit nicht nur sehr sicher, sondern auch auf jedem Web-Server funktionsfähig. Weiterhin sind statische Homepages sehr performant.

*** GitHub
Ein weiterer fantastischer Vorteil 0ist, dass die Open-Soure-Entwicklungsplattform [[http://www.github.com][GitHub]] Jekyll-Seiten kostenlos ohne Werbung publizieren lässt. So ist diese Seite kostenfrei unter [[http://knupfer.github.io]] gehostet. Dieser Service ist aber nicht alles, GitHub kompiliert für einen sogar den Sourcecode der Homepage. Jedoch gibt es hier auch kleine Einschränkungen, so werden zusätzliche Plugins beispielsweise aus Sicherheitsgründen nicht unterstützt.

** Emacs
Emacs ist wohl einer der ältesten und umfangreichesten Texteditoren. Dass ein Texteditor umfangreich oder gar komplex sein kann, mag zunächst überraschen, jedoch kann Emacs äußerst erstaunlich Dinge:
- Programmcode kann im Editor kompiliert werden
- Syntaxhighlighting
- Verschiedene Themes
- Sehr starke und umfangreiche Navigationswerkzeuge, z. B.:
  - Cursorbewegung durch Shortcuts
  - Löschen von Buchstaben, Wörtern oder ganzen Absätzen
  - Wechseln von verschiedenen Fenstern per Shortcut
  - Fenstersplitting usw.
- Durch seine Programmierbarkeit starke Erweiterbarkeit:
  - kann der Editor direkt als Taschenrechner verwendet werden
  - gibt viele IDE, die für Emacs von der Community programmiert wurden

*** Org Mode
[[http://www.orgmode.org][Org Mode]] ist eine von vielen möglichen Erweiterungen von Emacs, die selbst so umfangreich ist, dass die Dokumentation ein sehr dickes Buch füllt. Mit Org Mode kann man, wie der Name bereits sugeriert, sich organisieren. Dies fängt von ganz simplen Aufgaben wie Todo-Listen an, geht weiter zu einem sehr guten Outliner und auch zu mehrsprachigem (Computersprachen) literateprogramming.

**** Exportfunktionen
Eine große Stärke von Org Mode sind die Exportfunktionen. Es kann u. a. nach LaTeX, Html, Docbook und Ascii exportiert werden. Dieses Feature ist so sehr ausgereift, dass die resultierenden Dokumente oft sehr gut aussehen. Automatisch wird ein Inhaltsverzeichnis generiert, ausgezeichnet, ggf. code compiliert uvm. Aller Text dieser Homepage ist ausschließlich in Org Mode verfasst, in ein Html exportiert und danach mit einem Shellscript den Anforderungen von Jekyll angepasst.

**** Syntaxhighlighting
Der Export von Syntaxhighlighting von Html ist ein wenig aufwendig. Man könnte zwar auf das Syntaxhighlighting von Jekyll zurückgreifen, dies ist aber für helle Codeboxen optimiert, was nicht meiner Designvorstellung entsprach. Eine Änderung dieses Highlightings würde mit mühevollem ändern und testen jedes einzelnen Codeschlüsselwortes in einer css-Datei einhergehen, worauf ich keine Lust habe, da es auch möglich ist, dass diese Homepage ihr Äußeres noch mehrfach verändert etc.

Mithilfe des Zusatzpakete htmlize.el für Emacs ist es mir gelungen, Emacs so einzurichten, dass er automatisch das gleiche Syntaxhighlighting, welches derzeit im Editor aktiv ist, in den Html-export übernimmt. Über ein in Org Mode implementiertes Javascript ist es sogar möglich, über links Referenzcodezeilen zu manipulieren. Die Standardeinstellung war, die ganze Zeile gelb zu färben, was sehr direkt war. Ich habe mich für eine dezente Version entschieden und habe den Sourcecode so geändert, dass wenn der Cursor über dem link ist, die entsprechende Codezeile fett dargestellt wird.

** Das Shellscript
Da Jekyll einen speziellen Head einer Html-Datei benötigt, blieb mir nichts anderes übrig, diesen Anfang über ein Shellscript in das durch Emacs exportierte Html einzufügen. Ich habe Emacs so konfiguriert, dass es nur den Body der Html exportiert und habe das Javascript für das Syntaxhighlighting seperat abgespeichert. In dem Shellscript wird der [[(head)][Head]] aus der .org-Datei flexibel extrahiert und in einer neuen Datei abgespeichert, daraufhin das [[(java)][Javascript]] eingefügt und dann der Html-Body. Zum Schluss wird noch die Datei umbenannt und in den von Jekyll verabeiteten _posts-Ordner [[(move)][verschoben]]. Das Skript macht diese Prozedur automatisch, [[(for)][mit allen .org-Dateien]], die exportiert wurden, sprich die verändert wurden. Bereits aktuelle Posts werden nicht modifiziert, so bleibt das Datum des Posts erhalten.

Hier zum nachlesen und nachdenken das Shellscript, natürlich mit Syntaxhighlighting usw.

#+BEGIN_SRC sh -r
#!/bin/sh

for file in *.org (ref:for)
do
    DATEI=$(echo $file | sed 's/\(.*\).org/\1/') ;
    test -e $DATEI.html &&
    grep -B 20 -m 1 END $DATEI.org | head -n -1 |  (ref:head)
  tail -n +2 > $DATEI.org.publish &&
    cat _script >> $DATEI.org.publish && (ref:java)
    sed 'N; s/<\/ul>\n<\/div>/&<p><\/p>/; P; 
  s/<h2>Table of Contents<\/h2>/<h3>Inhaltsverzeichnis<\/h3>/; D'
  $DATEI.html >> $DATEI.org.publish &&
    cat $DATEI.org.publish > ../_posts/$DATEI.html && (ref:move)
    rm $DATEI.html $DATEI.org.publish;
done;
#+END_SRC
