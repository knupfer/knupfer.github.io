#+BEGIN_COMMENT
---
layout: post
title: Adaptives Testen
father: Wissenschaft
---
#+END_COMMENT
* Adaptives Testen
Beim adaptiven Testen werden die Möglichkeiten einer computerbasierten Testung in erweitertem Maße ausgenutzt.
Es wird innerhalb der Testung auf Grund der bereits beantworteten Fragen auf den Fähigkeitsgrad des Probanden geschätzt,
um ihm als nächstes eine Frage zu geben, die diesen reflektiert.

#+BEGIN_SRC ditaa :file /images/adaptiveditaa.png :exports code

+---------+   +-----------------+   +---------------+
| Item    |-->| Modellschätzung |-->|   Schätzung   |
| Antwort |   +-----------------+   | nächstes Item |
+---------+                         +---------------+
    ^                                       |
    |                                       |
    +---------------------------------------+

#+END_SRC 

** Kriterien
Wie genau die Frage ausgewählt wird hängt vornehmlich von den Zielen der Testung und den Nebenwirkungen, die man ggf. 
vermeiden möchte, ab. So wäre eine Frage, die der Proband mit einer Chance von 50% lösen kann ideal im Sinne eines 
Informationsgewinnes über den Probanden, da die Entropie maximal ist. 

Entropie stellt nicht nur Chaos, sondern auch Informationsdichte nach Shannon dar 
(vgl. [[http://de.wikipedia.org/wiki/Entropie_%28Informationstheorie%29][Wikipedia]]).
Die folgende Formel ergiebt die Entropie eines Ereignisses. Hierbei ist $n$ die Anzahl der Möglichkeiten und $p_i$ 
die jeweiligen Wahrscheinlichkeiten dieser (sich ausschließender) Möglichkeiten.

$$ H = - \sum_{i=1}^n p_i \cdot \log_2{p_i} $$

Betrachten wir ein binäres System, also nur Fragen die entweder vollständig falsch oder vollständig richtig beantwortet
werden können, so haben wir $n = 2$ und $p_2 = 1 - p_1$.

$$ H_2 = - p \cdot \log_2{p} - (1 - p) \cdot \log_2(1 - p) $$

Hieraus ergiebt sich, dass der Informationsgewinn bei $p = .5$ (im binären) maximal ist, da die Funktion symmetrisch ist und bei
$p = 0$ auf beiden Seiten $0$ ergibt.

$$ H_{max} = - 0.5 \cdot \log_2{0.5} - 0.5 \cdot \log_2{0.5} = 1 \mathrm{bit} $$

Hierbei ist $bit$ die übliche Einheit des Informationsgehaltes, auf Grund des $\log_2$. Es kann also ein Informationsgehalt
von 8 bit mit Hilfe eines bytes dargestellt werden, sprich mit 8 Nullen oder Einsen (z.B. 10101010).

#+BEGIN_SRC R :results output graphics :file /images/entropie.png :exports results
x = (0:100)/100
y = -x*log(x,2)-(1-x)*log(1-x,2)
plot(x,y,type="l",xlab=expression(Lösungswahrscheinlichkeit),ylab=expression("Entropie in bit"),  main="Entropieverteilung")
#+END_SRC

#+RESULTS:
[[file:/images/entropie.png]]

Mit der Formel für tatsächliche und für maximale Entropie kann die Redundanz ausgerechnet werden, welche in einer 
Testkonstruktion als Indikator für das Potential der Verbesserung durch ein adaptives Testverfahren benutzt werden kann.

$$ R = H_{max} - H $$

Somit kann im binären ein Test im idealfall um $R$ Fragen verkleinert werden, ohne an Informationen einzubüßen. 
Befinden sich im Test auch Fragen, die nicht binär sind, so verändert sich die Situation ein wenig.
Die Entropie wird stets maximal bei gleichen Wahrscheinlichkeiten. Gibt es nun bei einer Frage z.B. 0, 1, 2 oder 3 Punkte
gibt es eine maximale Entropie von $H_{max} = - \log_2{0.25} = 2 \mathrm{bit}$. Somit kann man einen Test auch um $R/2$ solcher
Fragen ohne Informationsverlust verkleinern.

*** Informationsgehalt in KoMus
Im August diesen Jahres habe ich mit Teilen des KoMus-Testes für musikalische Kompetenz eine empirische Studie
durchgeführt. Der KoMus-Test liegt in einem nicht adaptiven Format vor.

Interessant ist nun, die Überlegung, wieviel der Test von einer Überführung in einen adaptiven Test profitieren würde.

**** Durchschnittlicher Schüler
Der Simplizität halber können wir annehmen, dass ein Schüler genau die durchschnittlichen Lösungswahrscheinlichkeiten
für ein Item aufweist.

So muss man nur die Entropie mit den klassischen Itemschwierigkeiten der Items berechnen:

$$ H = \sum_{i=1}^n(- P_i \cdot \log_2{P_i} - (1 - P_i) \cdot \log_2(1 - P_i)) $$

Hierbei ist $P_i$ die klassische Itemschwierigkeit des Items $i$ und $n$ die Anzahl der Items. Ferner nimmt diese Formel
nur dichotome Items an.

**** Vierdimensional
Die Entropie ist jedoch eigentlich noch niedriger, wenn man die Schwierigkeiten adaptiv berechnet. Es handelt sich aber
immernoch um einen nicht adaptiven Test mit fester Reihenfolge. Es wird nur eine spezialform der Entropie, die bedingte
Entropie, benutzt (vgl. [[http://de.wikipedia.org/wiki/Bedingte_Entropie][Wikipedia]]).

Um die bedingte Lösungschance und somit auch die bedingte Entropie zu berechnen, werden alle Items der selben Dimension
einer logistisch binären Regression verwendet um die individuell Itemschwierigkeit eines Items der gleichen Dimension zu
berechnen.

$$ H = \sum_{D=1}^4(\sum_{i=1}^{n(D)}(- R \cdot \log_2{R}) - (1 - R) \cdot \log_2(1- R))$$
$$ R = Reg_2(P_{ivD}|\sum_{m=1}^{i(D)-1}P_{vmD}) $$

Hierbei ist $Reg_2(a|b)$ die binärlogistische Regression mit der AV $a$ und den UV $b$.

**** n-Dimensional
Das obige Modell nimmt jedoch an, dass die einzelnen Dimensionen nicht korrelieren und somit Itemantworten einer Dimension 
keine Information (also Entropiesenkung) über andere Dimensionen zulassen.

Dies ist aber eine nicht notwendige Einschränkung, die die Berechnung nicht nur weniger effektiv, sondern auch
komplizierter macht.

Berücksichtigen wir unabhängig von der Dimensionszugehörigkeit einfach alle bereits beantworteten Items, die einen
signifikanten Einfluss auf die Frage haben, haben wir im Endeffekt ein n-dimensionales Modell, wobei $n$ die Anzahl der
Fragen ist.

$$ H = \sum_{i=1}^n(- R \cdot \log_2{R} - (1 - R) \cdot \log_2(1 - R)) $$
$$ R = Reg_2(P_{iv}|\sum_{m=1}^{i-1}P_{vm}) $$

***** Probleme
Mögliche Probleme dieser Methode sind fehlende Datensätze, da die binärlogistische Regression normalerweise alle Fälle
ausschließt, die auch nur bei einem der UV keinen Wert hat. Durch den maßgeschneiderten Testweg ist es bei einem 
Itempool, der nicht komplett erschöpft wird, unmöglich diese Regression so durchzuführen. Dementsprechend müssen
andere Methoden gewählt werden, um mit fehlenden Daten umzugehen.

Eine Möglichkeit wäre, nicht vorhandene Antworten in den Datensätzen zu simulieren. Diese Simulation würde von den Items
die am sichersten geschätzt werden können zu den Items, die schwer geschätzt werden können stattfinden.

Der Grund hierfür liegt daran, dass bei einer sehr sicheren Schätzung der Entropiegehalt sich nur wenig ändert, 
aber es gleich viel mehr Personen gibt, die seriös für schwerere Schätzungen verwendet werden können, was diese
Schätzungen erleichtert.

Die Simulation sollte nach jeder Testung durchgeführt werden, um die Simulation mehr und mehr zu verbessern. Das dieses
Verfahren direkt einen Nutzen erbringt, sollte daran sichtbar sein, dass die Lösungen der alten Datensätze immer besser
retrospektiv vorhergesagt werden können und somit davon außgegangen werden kann, dass auch bei aktuellen Testungen
die Schätzungen besser sind und somit effektiver gemessen werden kann.

* Nicht adaptives Testen
 
* Adaptives Testen

** Umsetzung
   
*** Programmierung
   
**** Initialisierung
#+NAME: statistic
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
require(MASS)
library(multicore)
library(foreach)
library(doMC)
registerDoMC(3)

calculationtime <- proc.time()
komus = read.table("data/data_komus_bin2.dat",header=TRUE) 
komusmult = data.frame(read.table("data/komus.csv",header=TRUE, sep=','))
multifragen = array(which(sapply(komusmult, max) > 1))
multifragenalt = multifragen
komusmult[multifragen] = lapply(komusmult[multifragen],factor)

FUN.EntropieMC = function(x) {return(rowSums(-x*log(x+0.00000001, 2)))}
FUN.EntropieMC.IND = function(x) {return(sum(-x*log(x+0.00000001, 2)))}
FUN.Entropie = function(x) {return(-x*log(x+0.000001, 2)-(1-x)*log(1-x+0.00001, 2))}
FUN.Chances = function(x) {
    if (length(multifragen) > 0) {
        x[-multifragen] = lapply(x[-multifragen], predict, type="response")
        x[multifragen] = lapply(x[multifragen], predict, type="probs")
    } else {
        x = lapply(x, predict, type="response")
    }
    return(x)
}
FUN.Chances.IND = function(x,y) {
    x[-multifragen] = lapply(x[-multifragen], predict, data = komusmult[y,], type="response")
    x[multifragen] = lapply(x[multifragen], predict, data = komusmult[y,], type="probs")
    return(x)
}
FUN.Entropietemp = function(x) {
    if (length(multifragen) > 0) {
        x[multifragen] = lapply(x[multifragen], FUN.EntropieMC)
        x[-multifragen] =lapply(x[-multifragen], FUN.Entropie)
    } else {
        x =lapply(x, FUN.Entropie)
    }
    x = simplify2array(x)
    return(x)
}
FUN.Entropietemp.IND = function(x) {
    if (length(multifragen) > 0) {
        x[multifragen] = lapply(x[multifragen], FUN.EntropieMC.IND)
        x[-multifragen] =lapply(x[-multifragen], FUN.Entropie)
    } else {
        x =lapply(x, FUN.Entropie)
    }
    x = simplify2array(x)
    return(x)
}



FUN.EntroMC = function(funmultifragen, fundata, funmod) {

            if (length(funmultifragen) == 1) {
                chances = lapply(funmod, predict, fundata, type="response")
                Entropietemp = chances
                Entropietemp = lapply(chances, FUN.Entropie)
                Entropietemp = simplify2array(Entropietemp)
            } else {
                funmultifragen = funmultifragen[2:length(funmultifragen)]
                chances = funmod
                chances[-funmultifragen] = lapply(funmod[-funmultifragen], predict, fundata, type="response")
                chances[funmultifragen] = lapply(funmod[funmultifragen], predict, fundata, type="probs")
                Entropietemp = chances
                
                Entropietemp[funmultifragen] = lapply(chances[funmultifragen], FUN.EntropieMC.IND)
                Entropietemp[-funmultifragen] = lapply(chances[-funmultifragen], FUN.Entropie)
                Entropietemp = simplify2array(Entropietemp)
            }
return(Entropietemp)
}






Entropie = NULL
chances = NULL
fitting = NULL
modell = NULL
summe = data.frame()
############
items = length(komusmult)
#persons = length(komusmult[,1])
#items = 50
persons = 3
############

EEE = data.frame(matrix(ncol = 1, nrow = items+1))
SumSD = data.frame(matrix(ncol = 1, nrow = items+1))
RestEntropie = data.frame(matrix(ncol = 1, nrow = items+1))
RestEntropieSD = data.frame(matrix(ncol = 1, nrow = items+1))
names(EEE) = 'kill'
names(SumSD) = 'kill'
names(RestEntropie) = 'kill'
names(RestEntropieSD) = 'kill'
#+END_SRC

#+RESULTS: statistic

**** Unbedingte und bedingte Entropie in normaler Reihenfolge
#+NAME: statistic1
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    modell = NULL
    
    multifragen = multifragen[multifragen <= items]
    if (1 %in% multifragen) {
        modell[[1]] = polr(reformulate('1', names(komusmult[1])), data = komusmult)
    } else {
        modell[[1]] = glm(reformulate('1', names(komusmult[1])), data = komusmult, family = "binomial"(link=logit))
    }
    
    for (i in 2:items) {
        if (i %in% multifragen) {
            modell[[i]] = polr(reformulate(names(komusmult[1:i-1]), names(komusmult[i])), data = komusmult)
        } else {
            modell[[i]] = glm(reformulate(names(komusmult[1:i-1]), names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    
    fitting = modell
    <<fitting>>
    chances = FUN.Chances(fitting)
    
    Entropietemp = FUN.Entropietemp(chances)
    
    ### Without relations ###
    fitting = lapply(fitting, update, ~ 1)
    chances2 = FUN.Chances(fitting)
    
    Entropietemp2 = FUN.Entropietemp(chances2)
    
    multifragen = multifragenalt
    
    SumSDtemp = sd(Entropietemp[,1])
    for (i in 2:length(Entropietemp[1,])) {
        SumSDtemp[i] = sd(rowSums(Entropietemp[,1:i]))
    }
    
    SumSD$bedunsort = c(0,SumSDtemp)
    
    EEE$bedunsort = c(0,colMeans(Entropietemp))
    EEE$unbedunsort = c(0,colMeans(Entropietemp2))
    EEE$unbedsort = c(0,sort(colMeans(Entropietemp2), decreasing =TRUE))
    Entropietemp2 = data.frame(Entropietemp2)
    names(Entropietemp2) = names(komusmult[1:length(Entropietemp2)])    
#+END_SRC

#+RESULTS: statistic1
:  Warnmeldung:
: glm.fit: Angepasste Wahrscheinlichkeiten mit numerischem Wert 0 oder 1 aufgetreten

**** Bedingte, sortierte Entropie
#+NAME: statistic2
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    modell = NULL
    chances = NULL
    fitting = NULL
    
    ############## sortierte Reihenfolge
    for (i in 1:items) {
        if (i %in% multifragen) {
            modell[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
        } else {
            modell[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    
    chances = FUN.Chances(modell)
    Entropietemp = FUN.Entropietemp(chances)
    Entropietemp = data.frame(Entropietemp)
    names(Entropietemp) = names(komusmult[1:length(Entropietemp)])
    komus2 = komusmult[c(names(sort(colMeans(Entropietemp), decreasing=TRUE)))]
    #########
    
    names(sort(colMeans(Entropietemp), decreasing=TRUE))
    multifragen.alt = multifragen
    multifragen.alt
    multifragen = which(names(komus2) %in% names(komusmult[multifragen.alt]))
    modell = NULL
    fitting = NULL
    chances = NULL
    
    if (1 %in% multifragen) {
        modell[[1]] = polr(reformulate('1', names(komus2[1])), data = komus2)
    } else {
        modell[[1]] = glm(reformulate('1', names(komus2[1])), data = komus2, family = "binomial"(link=logit))
    }
    
    for (i in 2:items) {
        if (i %in% multifragen) {
            modell[[i]] = polr(reformulate(names(komus2[1:i-1]), names(komus2[i])), data = komus2)
        } else {
            modell[[i]] = glm(reformulate(names(komus2[1:i-1]), names(komus2[i])), data = komus2, family = "binomial"(link=logit))
        }
    }
    
    fitting = modell
    <<fitting>>
    chances = FUN.Chances(fitting)
    #chances[-multifragen] = mclapply(fitting[-multifragen], predict, type="response")
    #chances[multifragen] = mclapply(fitting[multifragen], predict, type="probs")
    
    #Entropietemp = fitting
    Entropietemp = FUN.Entropietemp(chances)
    #Entropietemp[multifragen] = lapply(chances[multifragen], FUN.EntropieMC)
    #Entropietemp[-multifragen] =lapply(chances[-multifragen], FUN.Entropie)
    #Entropietemp = simplify2array(Entropietemp)
    
    SumSDtemp = sd(Entropietemp[,1])
    for (i in 2:length(Entropietemp[1,])) {
        SumSDtemp[i] = sd(rowSums(Entropietemp[,1:i]))
    }
    
    SumSD$sortbed = c(0,SumSDtemp)
    
    EEE$sortbed = c(0,colMeans(Entropietemp))
    
    multifragen = multifragen.alt
#+END_SRC

#+RESULTS: statistic2
#+begin_example
 [1] "D34a"     "D41d"     "D32"      "D21d"     "D23b"     "D4235"   
 [7] "D119b13"  "D11613"   "D114a"    "D41f1"    "D113a56"  "D110b12b"
[13] "D113a16"  "D25a"     "D114d"    "D21c22"   "D113a26"  "D114c"   
[19] "D36a"     "D24b"     "D115a23"  "D17"      "D37c"     "D110a35" 
[25] "D41f2"    "D110a25"  "D21c12"   "D26a55"   "D41f3"    "D43a33"  
[31] "D36b"     "D1916"    "D4215"    "D31a"     "D118eMCe" "D24e"    
[37] "D110a15"  "D45a14"   "D12022"   "D12012"   "D119a"    "D37b"    
[43] "D44a44"   "D1926"    "X.D1124"  "D31b"     "D24a"     "D43a23"  
[49] "D45a24"   "D45b26"   "D26b2"    "D115c12"  "D26b1"    "D24h"
[1] 18 24 25 37 38 43
 Warnmeldungen:
1: glm.fit: fitted probabilities numerically 0 or 1 occurred 
2: glm.fit: fitted probabilities numerically 0 or 1 occurred 
3: glm.fit: Angepasste Wahrscheinlichkeiten mit numerischem Wert 0 oder 1 aufgetreten 
4: glm.fit: Angepasste Wahrscheinlichkeiten mit numerischem Wert 0 oder 1 aufgetreten 
5: glm.fit: Algorithmus konvergierte nicht 
6: glm.fit: Angepasste Wahrscheinlichkeiten mit numerischem Wert 0 oder 1 aufgetreten 
7: glm.fit: Angepasste Wahrscheinlichkeiten mit numerischem Wert 0 oder 1 aufgetreten
#+end_example

**** Durchschnittlich bedingtsortierte Entropie
#+NAME: statistic3
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    fragen = NULL
    modell = NULL
    Restentropietemp = NULL
    multifragenalt = multifragen
    ############## sortierte Reihenfolge
    for (i in 1:length(komusmult)) {
        if (i %in% multifragen) {
            fitting[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
        } else {
            fitting[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    #modell
    chances = FUN.Chances(fitting)
    
    Entropietemp = FUN.Entropietemp(chances)
    
    fragen = which(names(komusmult[which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))[1]]) == names(komusmult))[1]
    fragen
    #########
    modell[[1]] = fitting[[fragen]]
    
    for (i in 2:items) {
        Entropietemp = NULL
        fitting = NULL
    
        multifragen = which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt]))
    
        for (j in 1:length(komusmult[-fragen])) {
            if (j %in% multifragen) {
                fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
            } else {
                fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
            }
        }
        <<fitting>>
        chances = FUN.Chances(fitting)
    
        Entropietemp = FUN.Entropietemp(chances)
        Restentropietemp[[i-1]] = rowSums(Entropietemp)
    
        fragen = c(fragen, which(names(komusmult[-fragen][which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))[1]]) == names(komusmult))[1])
        modell[[i]] = fitting[[which(colMeans(Entropietemp) == max(colMeans(Entropietemp)))[1]]]
    }
    
    if (length(komusmult) == items) {
        Restentropietemp[[items]] = Restentropietemp[[1]]*0
    } else {
        fitting = NULL
    
        multifragen = which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt]))
    
        for (j in 1:length(komusmult[-fragen])) {
            if (j %in% multifragen) {
                fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
            } else {
                fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
            }
        }
        <<fitting>>
        chances = FUN.Chances(fitting)
        Entropietemp = FUN.Entropietemp(chances)
        Restentropietemp[[items]] = rowSums(Entropietemp)
    }
    multifragen = which(fragen %in% multifragenalt)
    
    Restentropietemp = simplify2array(Restentropietemp)
    
    chances = FUN.Chances(modell)
    Entropietemp = FUN.Entropietemp(chances)
    
    SumSDtemp = sd(Entropietemp[,1])
    for (i in 2:length(Entropietemp[1,])) {
    SumSDtemp[i] = sd(rowSums(Entropietemp[,1:i]))
    }
    
    SumSD$durchschbedsort = c(0,SumSDtemp)
    EEE$durchschbedsort = c(0,colMeans(Entropietemp))
    RestEntropie$durchschbedsort = c(0,colMeans(Restentropietemp))
    RestEntropieSD$durchschbedsort = c(0,apply(Restentropietemp, 2, sd))
#+END_SRC

#+RESULTS: statistic3
: [1] 38
:  Es gab 50 oder mehr Warnungen (Anzeige der ersten 50 mit warnings())

**** Individuellbedingtsortierte Entropie
#+NAME: statistic4
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    ## initializing
    Entropieall = NULL
    chances = NULL
    Restentropietemp = NULL
    fragen = NULL
    modell = NULL
    Restentropietemp = NULL
    multifragen = multifragenalt
    fitting = NULL
    
    ## first item
    for (i in 1:length(komusmult)) {
        if (i %in% multifragen) {
            fitting[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
        } else {
            fitting[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    
    chances = fitting
    chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[1,], type="response")
    chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[1,], type="probs")
    Entropietemp = FUN.Entropietemp.IND(chances)
    fragen = which(names(komusmult[which(Entropietemp == max(Entropietemp))[1]]) == names(komusmult))[1]
    
    modell[[1]] = fitting[[fragen]]
    frageninit = fragen
    fitting = NULL
    
    ## multicorecalculation for every person
    Entropieall = simplify2array(foreach(k=1:persons) %dopar% {
        fragen = frageninit
        Restentropie = NULL
        for (i in 2:items) {
            chances = NULL
            Entropietemp = NULL
            fitting = NULL
            multifragen = c(0,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
            for (j in 1:length(komusmult[-fragen])) {
                if (j %in% multifragen) {
                    fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                } else {
                    fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                }
            }
             
            <<fitting>>
            chances = fitting
             
            Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
           
            Restentropietemp[i-1] = sum(Entropietemp) #rest of entropie before this item
            fragen = c(fragen, which(names(komusmult[-fragen][which(Entropietemp == max(Entropietemp))[1]]) == names(komusmult))[1])
            modell[[i]] = fitting[[which(Entropietemp == max(Entropietemp))[1]]]
        }
        
        ## calculation of last rest entropie
        if (length(komusmult) == items) {
            Restentropietemp[items] = 0
        } else {
            fitting = NULL
            multifragen = 0
            multifragen = c(0,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
            for (j in 1:length(komusmult[-fragen])) {
                if (j %in% multifragen) {
                    fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                } else {
                    fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                }
            }
            <<fitting>>
                
            Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
            Restentropietemp[items] = sum(Entropietemp)
        }
        
        ## calculation of the choosen modell
        multifragen = c(0,which(fragen %in% multifragenalt))

        Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], modell)
        return(c(Entropietemp, Restentropietemp))    
    })
    
    Restentropietemp = (Entropieall[(items+1):(items*2),])
    Entropieall = Entropieall[1:items,]
     
    SumSDtemp = sd(Entropieall[1,])
    for (i in 2:length(Entropieall[,1])) {
        SumSDtemp[i] = sd(colSums(Entropieall[1:i,]))
    }
     
    SumSD$indivbedsort = c(0,SumSDtemp)
    EEE$indivbedsort = c(0,rowMeans(Entropieall))
    RestEntropie$indivbedsort = c(0,rowMeans(Restentropietemp))
    RestEntropieSD$indivbedsort = c(0,apply(Restentropietemp, 1, sd))
    
    multifragen = multifragenalt
#+END_SRC

#+RESULTS: statistic4

**** Individuellbedingtsortierte Entropie mit Trennschärfe
#+NAME: statistic5
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    Entropieall = NULL
    chances = NULL
    beta = NULL
    Restentropietemp = NULL
    Entropietemp = NULL
    fitting = NULL
    
    if (!exists("information")) {
        information = simplify2array(foreach(m=1:length(komus)) %dopar% {
            for (n in 1:(length(komus)-1)) {
                beta[[n]] = glm(reformulate(names(komus[m]), names(komus[-m][n])), data = komus, family = "binomial"(link=logit))
            }
            chances = simplify2array(lapply(beta, predict, type="response"))
            chancetemp = unlist(lapply(komus[m],mean))
            Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
            information = sum(colMeans(Entropietemp)) + (-chancetemp*log(chancetemp,2)-(1-chancetemp)*log(1-chancetemp,2))
            return(information)
        })
        information = -(information - sum(-colMeans(komus)*log(colMeans(komus),2)-(1-colMeans(komus))*log(1-colMeans(komus),2)))
    }
    
    
    
    
    
    for (j in 1:length(komus)) {
        fitting[[j]] = glm(reformulate('1', names(komus[j])), data = komus, family = "binomial"(link=logit))
    }
    <<fitting>>
    chances = simplify2array(lapply(fitting, predict, komus[1,], type="response"))
    Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + (information)
    frageninit = which(names(komus[which((Entropietemp) == max((Entropietemp)))[1]]) == names(komus))[1]
    
     
    
    modell[[1]] = fitting[[which((Entropietemp) == max((Entropietemp)))[1]]]
    
    Entropieall = simplify2array(foreach(k=1:persons) %dopar% {
        fragen = frageninit
        for (i in 2:items) {
            Entropietemp = NULL
            fitting = NULL
            for (j in 1:length(komus[-fragen])) {
                fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
            }
    
            <<fitting>>
            ## TODO stimmt das so?
            chances = simplify2array(lapply(fitting, predict, komus[k,], type="response"))
            Restentropietemp[i-1] = sum(-chances*log(chances,2)-(1-chances)*log(1-chances,2)) 
            Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2)) + (information[-fragen]*(1 - (length(fragen)+1)/items))
            fragen = c(fragen, which(names(komus[-fragen][which((Entropietemp) == max((Entropietemp)))[1]]) == names(komus))[1])
            modell[[i]] = fitting[[which((Entropietemp) == max((Entropietemp)))[1]]]
        }
    
        if (length(komus) == items) {
            Restentropietemp[items] = 0
        } else {
            fitting = NULL
            for (j in 1:length(komus[-fragen])) {
                fitting[[j]] = glm(reformulate(names(komus[fragen]), names(komus[-fragen][j])), data = komus, family = "binomial"(link=logit))
            }
            <<fitting>>
            chances = simplify2array(lapply(fitting, predict, komus[k,], type="response"))
            Restentropietemp[length(fragen)] = sum(-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        }
    
        chances = simplify2array(lapply(modell, predict, komus[k,], type="response"))
        Entropietemp = (-chances*log(chances,2)-(1-chances)*log(1-chances,2))
        
        return(c(Entropietemp, Restentropietemp))
    })
    
    Restentropietemp = (Entropieall[(items+1):(items*2),])
    Entropieall = Entropieall[1:items,]
    SumSDtemp = sd(Entropieall[1,])
    for (i in 2:length(Entropieall[,1])) {
    SumSDtemp[i] = sd(colSums(Entropieall[1:i,]))
    }
    
    SumSD$indivbedsorttrenn = c(0,SumSDtemp )
    EEE$indivbedsorttrenn = c(0,rowMeans(Entropieall))
    RestEntropie$indivbedsorttrenn = c(0,rowMeans(Restentropietemp))
    RestEntropieSD$indivbedsorttrenn = c(0,apply(Restentropietemp,1 ,sd))
#+END_SRC

#+RESULTS: statistic5

**** Individuellbedingtsortierte Entropie mit Prädiktion
#+NAME: statistic6
#+BEGIN_SRC R :session stat :exports code :results output :noweb yes
    ## initializing
    fitting = NULL
    Entropieall = NULL
    chances = NULL
    Restentropietemp = NULL
    fragen = NULL
    modell = NULL
    Restentropietemp = NULL
    multifragen = multifragenalt
    
    ## first item
    for (i in 1:length(komusmult)) {
        if (i %in% multifragen) {
            fitting[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
        } else {
            fitting[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    
    chances = fitting
    chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[1,], type="response")
    chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[1,], type="probs")
    Entropietemp = FUN.Entropietemp.IND(chances)
    fragen = which(names(komusmult[which(Entropietemp == max(Entropietemp))[1]]) == names(komusmult))[1]
    
    modell[[1]] = fitting[[fragen]]
    frageninit = fragen
    fitting = NULL
    Restentropie2 = NULL
    
    ## multicore calculation
    Entropieall = simplify2array(foreach(k=1:persons) %dopar% {
        fragen = frageninit
        Restentropie = NULL
        Restentropietemp2 = NULL
        Restentropietemp = NULL
        for (i in 2:items) {
            chances = NULL
            Entropietemp = NULL
            fitting = NULL
            fitting2 = NULL
            fittingplus = NULL
            fittingminus = NULL
            Entropietemp2 = NULL
            multifragen = 0
            multifragen = c(multifragen,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
            
            ## prediction for all not-answerd questions
            for (j in 1:length(komusmult[-fragen])) {
                if (j %in% multifragen) {
                    fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                } else {
                    fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                }
                
                ## prediction for all not-answered questions after prediction
                if (length(komusmult[-fragen]) > 1) {
                    multifragen2 = c(0,which(names(komusmult[-fragen][-j]) %in% names(komusmult[multifragenalt])))
                    for (n in 1:length(komusmult[-fragen][-j])) {
                        if (n %in% multifragen2) {
                            fitting2[[n]] = polr(reformulate(names(c(komusmult[fragen], komusmult[-fragen][j])), names(komusmult[-fragen][-j][n])), data = komusmult)
                        } else {
                            fitting2[[n]] = glm(reformulate(names(c(komusmult[fragen], komusmult[-fragen][j])), names(komusmult[-fragen][-j][n])), data = komusmult, family = "binomial"(link=logit))
                        }
                    }
                    
                    ## calculation of rest entropie for each possibility
                    tempdata = komusmult[k,]
                    ##tempdata[-fragen][j] = 0 #dies muss noch bearbeitet werden (chancen...)
                    <<fitting>>
#                        chances = fitting2
#                    if (length(multifragen2) == 1) {
#                        chances = lapply(fitting2, predict, tempdata, type="response")
#                        Entropietemp = chances
#                        Entropietemp = lapply(chances, FUN.Entropie)
#                        Entropietemp = simplify2array(Entropietemp)
#                    } else {
#                        multifragen2 = multifragen2[2:length(multifragen2)]
#                        chances[-multifragen2] = lapply(fitting2[-multifragen2], predict, tempdata, type="response")
#                        chances[multifragen2] = lapply(fitting2[multifragen2], predict, tempdata, type="probs")
#                        Entropietemp = chances
#                        
#                        ## Funktion kann nicht benutzt werden, da sie auf nicht manipulierte multifragen zugreift
#                        Entropietemp[multifragen2] = lapply(chances[multifragen2], FUN.EntropieMC.IND)
#                        Entropietemp[-multifragen2] = lapply(chances[-multifragen2], FUN.Entropie)
#                        Entropietemp = simplify2array(Entropietemp)
#                    }
                    Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)
                    Restentropietemp2[j] = sum(Entropietemp)
                } else {
                    Restentropietemp2[j] = 0 
                }
            }
            
            <<fitting>>
                chances = fitting
            
#            ## calculation of current rest entropie
#            if (length(multifragen) == 1) {
#                chances = lapply(fitting, predict, komusmult[k,], type="response")
#                Entropietemp = chances
#                Entropietemp = lapply(chances, FUN.Entropie)
#                Entropietemp = simplify2array(Entropietemp)
#            } else {
#                multifragen = multifragen[2:length(multifragen)]
#                chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[k,], type="response")
#                chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[k,], type="probs")
#                Entropietemp = chances
#                
#                ## Funktion kann nicht benutzt werden, da sie auf nicht manipulierte multifragen zugreift
#                Entropietemp[multifragen] = lapply(chances[multifragen], FUN.EntropieMC.IND)
#                Entropietemp[-multifragen] = lapply(chances[-multifragen], FUN.Entropie)
#                Entropietemp = simplify2array(Entropietemp)
#            }
            Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
            Restentropietemp[i-1] = sum(Entropietemp)
            fragen = c(fragen, which(names(komusmult[-fragen][which(Restentropietemp2 == min(Restentropietemp2))[1]]) == names(komusmult))[1])
            ## stimmt das? sollte das nicht mit Restentropietemp2 arbeiten?
            ##        modell[[i]] = fitting[[which(Entropietemp == max(Entropietemp))]]
            modell[[i]] = fitting[[which(Restentropietemp2 == min(Restentropietemp2))[1]]]
        }
        
        ## calculation of last rest entropie
        if (length(komusmult) == items) {
            Restentropietemp[items] = 0
        } else {
            fitting = NULL
            multifragen = 0
            multifragen = c(0,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
            for (j in 1:length(komusmult[-fragen])) {
                if (j %in% multifragen) {
                    fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                } else {
                    fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                }
            }
            
            <<fitting>>
#                if (length(multifragen) == 1) {
#                    chances = lapply(fitting, predict, komusmult[k,], type="response")
#                    Entropietemp = chances
#                    Entropietemp = lapply(chances, FUN.Entropie)
#                    Entropietemp = simplify2array(Entropietemp) 
#                } else {
#                    multifragen = multifragen[2:length(multifragen)]
#                    chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[k,], type="response")
#                    chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[k,], type="probs")
#                    Entropietemp = chances
#                    
#                    ## Funktion kann nicht benutzt werden, da sie auf nicht manipulierte multifragen zugreift
#                    Entropietemp[multifragen] = lapply(chances[multifragen], FUN.EntropieMC.IND)
#                    Entropietemp[-multifragen] = lapply(chances[-multifragen], FUN.Entropie)
#                    Entropietemp = simplify2array(Entropietemp)
#                }
            Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
        Restentropietemp[items] = sum(Entropietemp)
        }
        
        ## calculation of choosen modell
        multifragen = 0
        multifragen = c(multifragen,which(fragen %in% multifragenalt))
#        if (length(multifragen) == 1) {
#            chances = modell
#            chances = lapply(modell, predict, komusmult[k,], type="response")
#            Entropietemp = chances
#            Entropietemp = lapply(chances, FUN.Entropie)
#            Entropietemp = simplify2array(Entropietemp)
#        } else {
#            multifragen = multifragen[2:length(multifragen)]
#            chances = modell
#            chances[-multifragen] = lapply(modell[-multifragen], predict, komusmult[k,], type="response")
#            chances[multifragen] = lapply(modell[multifragen], predict, komusmult[k,], type="probs")
#            Entropietemp = chances
#            
#            ## Funktion kann nicht benutzt werden, da sie auf nicht manipulierte multifragen zugreift
#            Entropietemp[multifragen] = lapply(chances[multifragen], FUN.EntropieMC.IND)
#            Entropietemp[-multifragen] = lapply(chances[-multifragen], FUN.Entropie)
#            Entropietemp = simplify2array(Entropietemp)
#        }
        Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], modell)
        return(c(Entropietemp, Restentropietemp))    
    })
    
    Restentropietemp = (Entropieall[(items+1):(items*2),])
    Entropieall = Entropieall[1:items,]
    
    SumSDtemp = sd(Entropieall[1,])
    for (i in 2:length(Entropieall[,1])) {
        SumSDtemp[i] = sd(colSums(Entropieall[1:i,]))
    }
    
    SumSD$indivbedsortpred = c(0,SumSDtemp)
    EEE$indivbedsortpred = c(0,rowMeans(Entropieall))
    RestEntropie$indivbedsortpred = c(0,rowMeans(Restentropietemp))
    RestEntropieSD$indivbedsortpred = c(0,apply(Restentropietemp, 1, sd))
    
    multifragen = multifragenalt
    EEE
    SumSD
    RestEntropie
    RestEntropieSD
#+END_SRC

**** Experimenteller Code
#+BEGIN_SRC R :session stat :exports code :results output :noweb yes
                                 calculationtime <- proc.time()
                                 
                                     ## initializing
                                     fitting = NULL
                                     Entropieall = NULL
                                     chances = NULL
                                     Restentropietemp = NULL
                                     fragen = NULL
                                     modell = NULL
                                     Restentropietemp = NULL
                                     multifragen = multifragenalt
                                     
                                     ## first item
                                     for (i in 1:length(komusmult)) {
                                         if (i %in% multifragen) {
                                             fitting[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
                                         } else {
                                             fitting[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
                                         }
                                     }
                                     
                                     chances = fitting
                                     chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[1,], type="response")
                                     chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[1,], type="probs")
                                     Entropietemp = FUN.Entropietemp.IND(chances)
                                     fragen = which(names(komusmult[which(Entropietemp == max(Entropietemp))[1]]) == names(komusmult))[1]
                                     
                                     modell[[1]] = fitting[[fragen]]
                                     frageninit = fragen
                                     fitting = NULL
                                     Restentropie2 = NULL
             Entropieall = matrix(nrow=persons,ncol=items)
                                     ## multicore calculation
                                 #    Entropieall = simplify2array(foreach(k=1:persons) %dopar% {
                                     for (k in 1:persons) {
                                         fragen = frageninit
                                         Restentropie = NULL
                                         Restentropietemp2 = NULL
                                         Restentropietemp = NULL
                                         calcu = 0
                                         calcutime = proc.time()
                                         antwortmuster = vector(length=(length(komusmult)+2))
                                         if (file.exists('database.dat')) {
                                             schongerechnet = read.table('database.dat')
                                         }
                                         antwortmuster[1] = fragen[1] + as.numeric(as.character(komusmult[k,fragen[1]]))/100
                                                             #                antwortmuster[2] = komusmult[k,fragen[1]]
                                         for (i in 2:items) {
                                             chances = NULL
                                             Entropietemp = NULL
                                             fitting = NULL
                                             fitting2 = NULL
                                             fittingplus = NULL
                                             fittingminus = NULL
                                             Entropietemp2 = NULL
                                             found = 0
                                             multifragen = c(0,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
                                             Liste = NULL
                                             foundit = 0
                                             ## prediction for all not-answerd questions
                                             if (exists("schongerechnet")) {
                                                 for (m in 1:length(schongerechnet[,1])) {
                                                     for (u in 1:length(fragen)) {
                                                         if (sort(antwortmuster[1:length(fragen)])[u] != schongerechnet[m,u]) {
                                                             break
                                                         }
                                                         if (schongerechnet[m,(length(fragen)+3)] == 0 && u == length(fragen)) {
                                                             found = schongerechnet[m,(length(fragen)+2)]
                                                             Restentropietemp[i-1] = schongerechnet[m,(length(fragen)+1)]
                                                             fragen = c(fragen, found)
                                                         }
                                                     }
                                                     if (found != 0) {
                                                         break
                                                     }
                                                 }
                                             }
                                             if (found == 0) {
                                                 calcu = calcu+1
        isgood = NULL
                                                 for (q in 1:length(komusmult[-fragen])) {
                                                 if (q %in% multifragen) {
                                                     fitting[[q]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][q])), data = komusmult)
                                                 } else {
                                                     fitting[[q]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][q])), data = komusmult, family = "binomial"(link=logit))
                                                 }
                                                 
                                             }
        Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
    isgood = Entropietemp == max(Entropietemp)[1]
        
        
                                                 Liste =foreach(j=1:length(komusmult[-fragen])) %dopar% {
chance = NULL
                                                    if (j %in% multifragen) {
                                                    #    fitting = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                                                        chance = predict(fitting[[j]], komusmult[k,], type="probs")
                                                    } else {
    #                                                    fitting = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                                                        chance = predict(fitting[[j]], komusmult[k,], type="response")
                                                        chance[2] = 1-chance[1]
                                                    }
        #                                             Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
                                               #      tempdata = komusmult[k,]
                                               #          if (j %in% multifragen) {
                                               #              for (s in 1:length(chance)) {
                                               #                  tempdata[-fragen][j] = factor(s-1) #dies muss noch bearbeitet werden (chancen...)
                                               #                  Entropietemp = FUN.EntroMC(multifragen,tempdata, fitting)*chance[s]
                                               #                  Restentropietemp2[s] = sum(Entropietemp)
                                               #              }
                                               #              Restentropietemp2 = sum(Restentropietemp2)
                                               #          } else {
                                               #              tempdata[-fragen][j] = 1
                                               #              Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)*chance[1]
                                               #              Restentropietemp2 = sum(Entropietemp)
                                               #              tempdata[-fragen][j] = 0
                                               #              Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)*chance[2]
                                               #              Restentropietemp2[2] = sum(Entropietemp)
                                               #              Restentropietemp2 = sum(Restentropietemp2)
                                               #          }
                                               #          fitting2=NULL
           
           
           
                                                         Restentropietemp2 = NULL       
                                                    ## prediction for all not-answered questions after prediction
                                                    if (length(komusmult[-fragen]) > 1 && isgood[j]) {
                                                        multifragen2 = c(0,which(names(komusmult[-fragen][-j]) %in% names(komusmult[multifragenalt])))
                                                        for (n in 1:length(komusmult[-fragen][-j])) {
                                                            if (n %in% multifragen2) {
                                                                fitting2[[n]] = polr(reformulate(names(c(komusmult[fragen], komusmult[-fragen][j])), names(komusmult[-fragen][-j][n])), data = komusmult)
                                                            } else {
                                                                fitting2[[n]] = glm(reformulate(names(c(komusmult[fragen], komusmult[-fragen][j])), names(komusmult[-fragen][-j][n])), data = komusmult, family = "binomial"(link=logit))
                                                            }
                                                        }
                                                        
                                                        ## calculation of rest entropie for each possibility
                                                        tempdata = komusmult[k,]
                                                        if (j %in% multifragen) {
                                                            for (s in 1:length(chance)) {
                                                                tempdata[-fragen][j] = factor(s-1) #dies muss noch bearbeitet werden (chancen...)
                                                                Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)*chance[s]
                                                                Restentropietemp2[s] = sum(Entropietemp)
                                                            }
                                                            Restentropietemp2 = sum(Restentropietemp2)
                                                        } else {
                                                            tempdata[-fragen][j] = 1
                                                            Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)*chance[1]
                                                            Restentropietemp2 = sum(Entropietemp)
                                                            tempdata[-fragen][j] = 0
                                                            Entropietemp = FUN.EntroMC(multifragen2,tempdata, fitting2)*chance[2]
                                                            Restentropietemp2[2] = sum(Entropietemp)
                                                            Restentropietemp2 = sum(Restentropietemp2)
                                                        }
                                                        fitting2=NULL
                                                    } else { 
                                                        if (isgood[j]) {
                                                            Restentropietemp2 = 0 
                                                        } else {
                                                            Restentropietemp2 = 55555555
                                                        }
                                                    }
                                                    return(Restentropietemp2)   
                                                }
                                                 
    #                                             Liste = unlist(Liste, recursive = FALSE)
    #                                             
    #                                             Restentropietemp2 = unlist(Liste[(1:(length(Liste)/2))*2])
    #                                             fitting = Liste[(1:(length(Liste)/2))*2-1]
     Restentropietemp2 = simplify2array(Liste)                                                       
                                                 fragen = c(fragen, which(names(komusmult[-fragen][which(Restentropietemp2 == min(Restentropietemp2))[1]]) == names(komusmult))[1])
                                                 modell[[i]] = fitting[[which(Restentropietemp2 == min(Restentropietemp2))[1]]]
    
    
                                                 <<fitting>>
                                                     chances = fitting
                                                 
                                                 Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
                                                 Restentropietemp[i-1] = sum(Entropietemp)
                                                 
                                             } 
                                             antwortmuster[i] = fragen[i] + as.numeric(as.character(komusmult[k,fragen[i]]))/100
                                                          
                                             if (found == 0) {
                                                 temp = antwortmuster
                                                 temp[1:(i-1)] = sort(antwortmuster[1:(i-1)])
                                                 temp[i] = Restentropietemp[i-1]
                                                 temp[i+1] = fragen[i]
                                                 write(temp, file='database.dat', append=TRUE, ncolumns=length(antwortmuster))
                                             }
                                             plot(Restentropietemp, type='l', col=rgb(0,0.7,0.7))
                                         }
                                         ## calculation of last rest entropie
                                         if (length(komusmult) == items) {
                                             Restentropietemp[items] = 0
                                         } else {
                                             fitting = NULL
                                             multifragen = 0
                                             multifragen = c(0,which(names(komusmult[-fragen]) %in% names(komusmult[multifragenalt])))
                                             for (j in 1:length(komusmult[-fragen])) {
                                                 if (j %in% multifragen) {
                                                     fitting[[j]] = polr(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult)
                                                 } else {
                                                     fitting[[j]] = glm(reformulate(names(komusmult[fragen]), names(komusmult[-fragen][j])), data = komusmult, family = "binomial"(link=logit))
                                                 }
                                             }
                                             
                                             <<fitting>>
                                                 
                                                 Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], fitting)
                                             Restentropietemp[items] = sum(Entropietemp)
                                         }
                                         
                                         ## calculation of choosen modell
                                         multifragen = 0
                                         multifragen = c(multifragen,which(fragen %in% multifragenalt))
                                         if (calcu != 0) {
                                             temp = vector(length=(length(komusmult)+2))
                                             temp[2] = k
                                             temp[3] = (proc.time() - calcutime)[3]
                                             temp[4] = calcu
                                             write(temp, file='database.dat', append=TRUE, ncolumns=length(antwortmuster))
                                         }
                                                         #Entropietemp = FUN.EntroMC(multifragen,komusmult[k,], modell)
                                                         #    return(c(Entropietemp, Restentropietemp))
                                         Entropieall[k,] = Restentropietemp
                                     }#})
                 
                                                         #Restentropietemp = (Entropieall[(items+1):(items*2),])
                                                         #Entropieall = Entropieall[1:items,]
                 
             #    SumSDtemp = sd(Entropieall[1,])
              #   for (i in 2:length(Entropieall[,1])) {
               #      SumSDtemp[i] = sd(colSums(Entropieall[1:i,]))
                # }
                 
                 #SumSD$indivbedsortpred = c(0,SumSDtemp)
                 #EEE$indivbedsortpred = c(0,rowMeans(Entropieall))
                 RestEntropie$indivbedsortpred = c(0,colMeans(Entropieall))
                 RestEntropieSD$indivbedsortpred = c(0,apply(Entropieall, 2, sd))
                 
                 multifragen = multifragenalt
                 #EEE
                 #SumSD
                 RestEntropie
                 RestEntropieSD
#+END_SRC

#+RESULTS:
#+begin_example
   indivbedsortpred  indivbedsort
1        0.00000000  5.512415e+01
2       51.35907667  5.135908e+01
3       48.81582000  4.881582e+01
4       46.75794333  4.562663e+01
5       45.51642000  4.325132e+01
6       43.51850333  4.112426e+01
7       42.37757333  4.042258e+01
8       40.79356000  3.854947e+01
9       39.57111000  3.716378e+01
10      38.85900000  3.618153e+01
11      38.49110333  3.519636e+01
12      37.39650667  3.388109e+01
13      36.53168000  3.279737e+01
14      35.12376000  3.180080e+01
15      34.01320667  3.026254e+01
16      33.22901667  2.864349e+01
17      32.61010000  2.724371e+01
18      31.95430667  2.623535e+01
19      31.09503667  2.508785e+01
20      29.53204333  2.405066e+01
21      28.77588667  2.277454e+01
22      27.71298667  2.177713e+01
23      26.92562000  2.034057e+01
24      26.31079000  1.946257e+01
25      25.54026333  1.803385e+01
26      24.33001333  1.721388e+01
27      22.75637333  1.597181e+01
28      21.28342667  1.498193e+01
29      20.29931333  1.396405e+01
30      19.24166667  1.307385e+01
31      18.20082333  1.191703e+01
32      17.75165667  1.097635e+01
33      16.88355000  1.016586e+01
34      15.95108333  9.202684e+00
35      15.69948333  7.899795e+00
36      14.97986333  7.097354e+00
37      14.29918667  6.081928e+00
38      13.74156000  5.460851e+00
39      12.78344000  4.772650e+00
40      11.90049333  4.067948e+00
41      11.14289667  3.413253e+00
42      10.60420000  2.846556e+00
43       9.76043400  2.350530e+00
44       8.00142567  1.769718e+00
45       7.27654133  1.480445e+00
46       7.18327067  1.097974e+00
47       6.65206400  7.927647e-01
48       5.28410967  5.259278e-01
49       4.85331833  3.187139e-01
50       3.26410533  1.914815e-01
51       2.61981200  6.822902e-02
52       1.88945100  1.518414e-02
53       0.63633380  3.023751e-03
54       0.01750709 -5.770756e-06
55       0.00000000  0.000000e+00
   indivbedsortpred indivbedsort
1        0.00000000 0.000000e+00
2        0.73626593 7.362653e-01
3        0.31769969 3.176987e-01
4        0.58883257 4.793886e-01
5        0.47281875 5.785675e-01
6        1.03360931 6.393388e-01
7        1.35424266 9.577214e-01
8        1.21930633 1.274269e+00
9        1.32488984 2.027016e+00
10       1.30099273 1.909940e+00
11       0.80615468 1.643141e+00
12       0.95669944 1.960404e+00
13       0.90708640 1.964451e+00
14       0.62132121 1.529076e+00
15       1.18971368 1.878734e+00
16       0.44513378 2.053826e+00
17       0.45204319 2.220281e+00
18       0.36223211 2.052133e+00
19       0.33878530 1.876594e+00
20       0.32835853 2.009701e+00
21       0.56435673 1.974349e+00
22       0.83285755 1.933595e+00
23       0.34692387 2.002850e+00
24       0.35767683 1.692322e+00
25       0.50423868 1.799258e+00
26       0.54804700 1.725785e+00
27       0.45201665 1.812078e+00
28       1.05109429 1.929145e+00
29       0.96785497 1.743920e+00
30       1.13072874 1.755639e+00
31       1.21593032 1.502964e+00
32       1.81961329 1.570259e+00
33       1.79432292 1.452640e+00
34       1.49351920 1.378060e+00
35       1.41433285 1.133211e+00
36       0.79995535 1.130159e+00
37       0.52543705 9.339317e-01
38       0.14859745 7.751506e-01
39       0.11536975 9.749697e-01
40       0.28325276 8.970542e-01
41       0.40936682 8.093955e-01
42       0.34851890 6.485482e-01
43       0.19618676 6.307331e-01
44       0.44100079 5.379630e-01
45       0.10431056 6.920624e-01
46       0.36854398 5.264797e-01
47       0.37862328 3.919423e-01
48       0.46464706 2.473037e-01
49       0.68695282 2.055540e-01
50       0.50191052 1.517166e-01
51       0.61925114 3.453077e-02
52       0.88309830 7.483717e-03
53       0.32651072 4.935855e-03
54       0.01060055 7.496422e-06
55       0.00000000 0.000000e+00
#+end_example


**** Exp2
#+BEGIN_SRC R :session stat :results output

mupp = vector(length = length(komusmult)*2)
mup = c(fragen, 0:(length(komusmult)-length(fragen))*0)

#+END_SRC

**** Schlussberechnungen
#+NAME: statisticend
#+BEGIN_SRC R :session stat :exports both :results output :noweb yes
    if (names(EEE[1]) == 'kill') {
        EEE = EEE[-1]
    }
    
    if (names(SumSD[1]) == 'kill') {
        SumSD = SumSD[-1]
    }
    
    if (names(RestEntropie[1]) == 'kill') {
        RestEntropie = RestEntropie[-1]
        RestEntropieSD = RestEntropieSD[-1]
    }
    
    for (i in 1:length(EEE[1,])) {
        for (j in 1:length(EEE[,1])) {
            summe[j,i] = sum(EEE[1:j,i])
        }
    }
    
    fitting = NULL
    multifragen = multifragenalt
    for (i in 1:length(komusmult)) {
        if (i %in% multifragen) {
            fitting[[i]] = polr(reformulate('1', names(komusmult[i])), data = komusmult)
        } else {
            fitting[[i]] = glm(reformulate('1', names(komusmult[i])), data = komusmult, family = "binomial"(link=logit))
        }
    }
    
    chances = fitting
    chances[-multifragen] = lapply(fitting[-multifragen], predict, komusmult[1,], type="response")
    chances[multifragen] = lapply(fitting[multifragen], predict, komusmult[1,], type="probs")
    Entropietemp = FUN.Entropietemp.IND(chances)
    RestEntropie[1,] = sum(Entropietemp)
    
    names(summe) = names(EEE)
    
    if (exists("benchmark")) {
        benchmark = array(c(benchmark,(proc.time() - calculationtime)[3]))
    } else {
        benchmark = (proc.time() - calculationtime)[3]
    }
    EEE
    benchmark
#+END_SRC

#+RESULTS: statisticend
#+begin_example
    indivbedsort indivbedsortpred
1   0.000000e+00                0
2   2.721777e+00                1
3   2.432670e+00                1
4   2.154384e+00                1
5   1.975223e+00                1
6   1.645492e+00                1
7   9.998728e-01                1
8   1.002401e+00                1
9   9.992680e-01                1
10  9.992376e-01                1
11  9.996730e-01                1
12  9.999130e-01                1
13  9.981415e-01                1
14  9.989579e-01                1
15  9.971855e-01                1
16  9.948196e-01                1
17  9.901890e-01                1
18  9.884324e-01                1
19  9.968586e-01                1
20  9.905953e-01                1
21  9.822517e-01                1
22  9.740095e-01                1
23  9.781170e-01                1
24  9.703556e-01                1
25  9.709585e-01                1
26  9.744011e-01                1
27  9.852493e-01                1
28  9.480422e-01                1
29  9.207892e-01                1
30  9.091900e-01                1
31  9.027296e-01                1
32  8.991390e-01                1
33  8.393290e-01                1
34  8.459918e-01                1
35  8.447474e-01                1
36  7.623495e-01                1
37  7.030355e-01                1
38  6.906098e-01                1
39  6.707320e-01                1
40  6.275486e-01                1
41  5.542715e-01                1
42  5.458267e-01                1
43  4.408620e-01                1
44  4.240422e-01                1
45  3.365356e-01                1
46  3.718148e-01                1
47  2.759980e-01                1
48  2.811121e-01                1
49  1.985363e-01                1
50  1.345265e-01                1
51  1.214295e-01                1
52  5.141231e-02                1
53  1.179508e-02                1
54  3.029522e-03                1
55 -5.770756e-06                1
[1]  843.260 1022.777 1015.817  635.640  463.285
#+end_example

**** Formel für die Modellanpassung
#+NAME: fitting
#+BEGIN_SRC R
#fitting = mclapply(fitting, step, trace = 0)
#fitting = mclapply(fitting, step, ~.^2, trace = 0)
#+END_SRC

**** Benchmark
#+BEGIN_SRC R :session stat :noweb yes :results output graphics :file /images/benchmark.png :exports both
plot(benchmark, type="l", col=rgb(0,0,0), ann=F)
title(xlab="Durchlauf")
title(ylab="Dauer")
#+END_SRC

#+RESULTS:
[[file:/images/benchmark.png]]

**** Entropiegrafik
#+NAME: grafik
#+BEGIN_SRC R :session stat :noweb yes :results output graphics :file /images/entropie2.png :exports both
    
    farbe = NULL
    farbeSD = NULL
    for (j in 1:(length(summe[1,]))) {
        r = runif(1,0.1,0.9)
        g = runif(1,0.1,0.9)
        b = runif(1,0.1,0.9)
        farbe[j] = rgb(r^1.2, g^1.2, b^1.2)
        farbeSD[j] = rgb(sqrt(r), sqrt(g), sqrt(b))
    }
    
    plot(0:(length(komusmult)), type="l", col=rgb(0,0,0), ann=F)
    for (i in 1:(length(summe[1,]))) {
        lines(summe[,i], col=farbe[i])
        if (dim(SumSD[names(SumSD) == names(summe[i])])[2] != 0) {
            lines(summe[,i]+SumSD[names(summe[i])],lty = 4, col=farbeSD[i])
            lines(summe[,i]-SumSD[names(summe[i])],lty = 4, col=farbeSD[i])
        }
        if (dim(RestEntropie[names(RestEntropie) == names(summe[i])])[2] != 0) {
            lines(RestEntropie[names(summe[i])], col=farbe[i])
            lines(RestEntropie[names(summe[i])]+RestEntropieSD[names(summe[i])],lty = 4, col=farbeSD[i])
            lines(RestEntropie[names(summe[i])]-RestEntropieSD[names(summe[i])],lty = 4, col=farbeSD[i])
        }
    }
    
    title(xlab="Anzahl der beantworteten Fragen")
    title(ylab="Entropie in bit")
    legend(length(komusmult)/4, length(komusmult), c(names(summe), round(benchmark[length(benchmark)])), cex=0.9, col=c(farbe, rgb(1,1,1)), lty=1);
#+END_SRC

#+RESULTS: grafik
[[file:/images/entropie2.png]]
